package com.github.mdr.graphospasm.grapheditor.namespace

import com.github.mdr.graphospasm.core.graph.Name

object SimpleNamespacePrefixManager {

  private val autoGeneratedPrefixComponents = "abcdefghijklmnopqrstuvwxyz".map(_.toString)

}

class SimpleNamespacePrefixManager extends NamespacePrefixManager {

  private final var showPrefixes = false

  import SimpleNamespacePrefixManager._
  private var namespaceToPrefixMap: Map[String, String] = Map()
  private var prefixToNamespaceMap: Map[String, String] = Map()

  private def autoGeneratePrefix(namespace: String): String = {
    for (candidatePrefix ← autoGeneratedPrefixComponents)
      if (!prefixToNamespaceMap.contains(candidatePrefix)) {
        namespaceToPrefixMap += namespace -> candidatePrefix
        prefixToNamespaceMap += candidatePrefix -> namespace
        return candidatePrefix
      }
    throw new IllegalStateException("No free prefixes") // TODO
  }

  def getPrefix(name: Name): String = {
    if (!namespaceToPrefixMap.contains(name.namespace))
      autoGeneratePrefix(name.namespace)
    namespaceToPrefixMap(name.namespace)
  }

  def getDisplayName(name: Name): String =
    if (showPrefixes && name.namespace != "")
      getPrefix(name) + ":" + name.simpleName
    else
      name.simpleName

  def registerPrefix(namespace: String, prefix: String) {
    namespaceToPrefixMap += namespace -> prefix
    prefixToNamespaceMap += prefix -> namespace
  }

  def setShowNamespaces(showNamespaces: Boolean) {
    showPrefixes = showNamespaces
  }
}